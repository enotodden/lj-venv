#!/usr/bin/env bash

# lj-venv
# =================
# A script to install LuaJIT + LuaRocks in a self contained directory #
# A 'fork' of my turbo-virtual-env script, without the turbo-specific stuff

# I know it's corny that this is a shell script and not written in Lua,
# but the upside is that the user won't have to have Lua or LuaJIT
# installed already.

LUAJIT_GITVERSION="2.0"
LUAJIT_GIT_URL="http://luajit.org/git/luajit-$LUAJIT_GITVERSION.git"
LUAROCKS_GIT_URL="https://github.com/keplerproject/luarocks.git"
MAKE="make -j`getconf _NPROCESSORS_ONLN`"

set -e;
set -x;

CHECKFOR="readlink git make"
for x in $CHECKFOR; do
	which $x > /dev/null;
	if [ $? -ne 0 ]; then
		echo "Error: Could not find command '$x'."
		exit 1
	fi
done

usage(){
	echo -e "\
** lj-venv **

Usage: lj-venv -c/--create PATH_TO_ENV_DIR
               [-r/--luarocks-requirements PATH_TO_LUAROCKS_REQUIREMENTS_FILE]

Example Usage:
  \$ cd /path/to/my/project
  \$ lj-venv --create ./env
  \$ source ./env/bin/activate

Description:
  A script to install LuaJIT and LuaRocks together in an 'isolated' environment,
  inspired by the virtual-env tool for Python.
  - Clones, builds and installs LuaJIT and LuaRocks
  - Creates a source-able 'activate' script in DIR_SUPPLIED_ON_COMMAND_LINE/bin/activate

Issues:	github.com/enotodden/lj-venv/issues
Source: github.com/entoodden/lj-venv
License: MIT"
}

log () {
	echo "lj-venv: $@"
}


luajit_full_version(){
    LUAJIT_DIR="$ENVDIR/src/luajit-$LUAJIT_GITVERSION"
    LUAJIT_MAJVER=`cat $LUAJIT_DIR/etc/luajit.pc | grep '^majver' | sed 's/majver\s*=\s*//g'`
    LUAJIT_MINVER=`cat $LUAJIT_DIR/etc/luajit.pc | grep '^minver' | sed 's/minver\s*=\s*//g'`
    LUAJIT_RELVER=`cat $LUAJIT_DIR/etc/luajit.pc | grep '^relver' | sed 's/relver\s*=\s*//g'`
    echo "$LUAJIT_MAJVER.$LUAJIT_MINVER.$LUAJIT_RELVER"
}


install_luarocks(){
	LUAROCKS_CLONEDIR=/tmp/tvenv-luarocks
	LUAROCKS_SRCDIR="$ENVDIR/src/luarocks"

	if [ ! -d $LUAROCKS_CLONEDIR ]; then
		log "Cloning LuaRocks to $LUAROCKS_CLONEDIR"
		git clone $LUAROCKS_GIT_URL $LUAROCKS_CLONEDIR
	else
		log "Found LuaRocks in $LUAROCKS_CLONEDIR, not cloning repo."
	fi

	log "Copying files"
	mkdir -p $LUAROCKS_SRCDIR
	cp -rvf $LUAROCKS_CLONEDIR/* $LUAROCKS_SRCDIR/

	log "Building LuaRocks"
    $LUAROCKS_SRCDIR/configure --prefix=$ENVDIR --force-config --with-lua=$ENVDIR --with-lua-include=$ENVDIR/include/luajit-$LUAJIT_GITVERSION
    mv config.unix $LUAROCKS_SRCDIR
    $MAKE -C $LUAROCKS_SRCDIR build

	log "Installing LuaRocks"
    $MAKE -C $LUAROCKS_SRCDIR install
}


install_luajit(){
    LUAJIT_CLONEDIR="/tmp/tvenv-luajit-$LUAJIT_GITVERSION"
	LUAJIT_SRCDIR="$ENVDIR/src/luajit-$LUAJIT_GITVERSION"

	if [ ! -d $LUAJIT_CLONEDIR ]; then
		log "Cloning LuaJIT from $LUAJIT_GIT_URL to $LUAJIT_CLONEDIR"
		git clone $LUAJIT_GIT_URL $LUAJIT_CLONEDIR
	else
		log "Found LuaJIT in $LUAJIT_CLONEDIR, not cloning repo."
	fi

	log "Copying files"
	mkdir -p $LUAJIT_SRCDIR
	cp -rvf $LUAJIT_CLONEDIR/* $LUAJIT_SRCDIR

	log "Building LuaJIT"
    $MAKE -C $LUAJIT_SRCDIR PREFIX=$ENVDIR

    log "Installing LuaJIT to $ENVDIR"
    $MAKE -C $LUAJIT_SRCDIR install PREFIX=$ENVDIR
    ln -sf $ENVDIR/bin/luajit-`luajit_full_version` $ENVDIR/bin/lua
}

install_luarocks_requirements() {
    log "Installing luarocks from $LUAROCKS_REQUIREMENTS_FILE"
    source $ENVDIR/bin/activate
    for line in `cat $LUAROCKS_REQUIREMENTS_FILE`; do
        luarocks install $line
    done
}

write_activate_script(){
    log "Writing activation script to $ENVDIR/bin/activate"
    echo -e '

if [ "$LJ_VENV" = "'"$ENVDIR"'" ]; then
	echo "Already activated!"
else
	export LJ_VENV='"$ENVDIR"'
	export LJ_VENV_OLD_PATH="$PATH"
	export PATH="$LJ_VENV/bin:$LJ_VENV/lib:$PATH"
	export LJ_VENV_OLD_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
	export LD_LIBRARY_PATH="$LJ_VENV/lib:$LJ_VENV/lib/lua/5.1:$LD_LIBRARY_PATH"

	deactivate() {
		export PATH="$LJ_VENV_OLD_PATH"
		export LD_LIBRARY_PATH="$LJ_VENV_OLD_LD_LIBRARY_PATH"
		unset LJ_VENV
		if [ ! -z "$LJ_VENV_OLD_PROMPT" ]; then
			export PS1="$LJ_VENV_OLD_PROMPT"
		fi
		unset LJ_VENV_OLD_PROMPT
		unset LJ_VENV_OLD_PATH
		unset LJ_VENV_OLD_LD_LIBRARY_PATH
	}

	export LJ_VENV_OLD_PROMPT="$PS1";
	if [ -z "$LJ_VENV_DISABLE_PROMPT" ]; then
		export PS1="tvenv -> $PS1";
	fi
fi
    ' > $ENVDIR/bin/activate
}


create(){

    if [ -d $ENVDIR ]; then
        if [ ! -f "$ENVDIR/.lj-venv" ]; then
            echo "Directory '$ENVDIR' already exists and is not a lj-venv directory."
            exit 1
        fi
    fi

    log "Creating directories"
    mkdir -p "$ENVDIR/bin"
    mkdir -p "$ENVDIR/src"

    touch "$ENVDIR/.lj-venv"

    write_activate_script

    install_luajit
    install_luarocks

    if [ ! -z "$LUAROCKS_REQUIREMENTS_FILE" ]; then
        install_luarocks_requirements
    fi

    log "All done, please source $ENVDIR/bin/activate"
}

ARGS=`getopt -o "hc:d:r:" -l "help,create:,luarocks-requirements:" -n "lj-venv" -- "$@"`
eval set -- "$ARGS"

ACTION=""

while true; do
    case "$1" in
        -h|--help)
            usage
            exit
            shift;;
        -r|--luarocks-requirements)
            LUAROCKS_REQUIREMENTS_FILE=`readlink -f "$2"`
            shift 2;;
        -c|--create)
            ENVDIR=`readlink -f "$2"`
            ACTION="create"
            shift 2;;
        --)
            shift
            break;;
    esac
done

if [ "$ACTION" = "create" ]; then
    create
else
    usage
fi
